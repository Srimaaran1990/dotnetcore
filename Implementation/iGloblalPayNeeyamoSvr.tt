 
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#><#

UserSettings userSettings =
        new UserSettings
        {
            SourceCsdlPath = @"D:\DynamicProxyLibrary\Training\RTS\Neeyamo.EntityFramework\RT.edmx",
            ReferenceCsdlPaths = new string[] {},
            FullyQualifySystemTypes = true,
            CreateContextAddToMethods = true,
            CamelCaseFields = false,
        };

ApplyUserSettings(userSettings);
if(Errors.HasErrors)
{
    return String.Empty;
}

MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
CodeRegion region = new CodeRegion(this);
CodeGenerationTools code = new CodeGenerationTools(this){FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, CamelCaseFields = userSettings.CamelCaseFields};

ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray());
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath);
string namespaceName = code.VsNamespaceSuggestion();
UpdateObjectNamespaceMap(namespaceName);
var container = ItemCollection.OfType<EntityContainer>().FirstOrDefault(); 
if (container == null)
{
    return string.Empty;
}
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Configuration;
using System.Data.Entity;
//using System.Data.Objects;
using System.Data.Entity.Core.Objects;
//using System.Data.Services.Client;
using System.ServiceModel;
using  Common.Framework.Persistence;
using  Common.ServiceLocator;
using  Neeyamo.Business.Entities;
using  Neeyamo.Business.Interfaces;
using  Neeyamo.EntityFramework;
using  Neeyamo.Business;
using  Common.Utils;
using System.Linq.Expressions;
using System.Reflection;
//using MvcPaging;
using AutoMapper;
using  Neeyamo.Persistence.DbContextScope;
using Neeyamo.Business.Entities.AdminModel.Tool;
namespace <#=namespaceName #>
{   
	[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple, InstanceContextMode = InstanceContextMode.PerCall)]
    public partial class NeeyamoSvr : INeeyamoSvr
    {
	    private readonly IAmbientDbContextLocator _ambientDbContextLocator;
        private readonly IDbContextScopeFactory _dbContextScopeFactory;
        private ConfigurationTrackerEntities iPayrollDbContext
        {
            get
            {
                var dbContext = _ambientDbContextLocator.Get<ConfigurationTrackerEntities>();

                if (dbContext == null)
                    throw new InvalidOperationException("No ambient DbContext of type UserManagementDbContext found. This means that this repository method has been called outside of the scope of a DbContextScope. A repository must only be accessed within the scope of a DbContextScope, which takes care of creating the DbContext instances that the repositories need and making them available as ambient contexts. This is what ensures that, for any given DbContext-derived type, the same instance is used throughout the duration of a business transaction. To fix this issue, use IDbContextScopeFactory in your top-level business logic service method to create a DbContextScope that wraps the entire business transaction that your service method implements. Then access this repository within that scope. Refer to the comments in the IDbContextScope.cs file for more details.");
                return dbContext;
            }
        }

        public NeeyamoSvr( )
        {
            _ambientDbContextLocator = new AmbientDbContextLocator();
            _dbContextScopeFactory = new DbContextScopeFactory();
        }

        static NeeyamoSvr()
        {
                if (typeof(<#=code.Escape(container)#>).IsSubclassOf(typeof(ObjectContext)))
                {
                    // Below are commented out since now iGlobalPayEntities is DbContext; Uncomment them out if iGlobalPayEntities is ObjectContext; 
                    /*ObjectCxtFrameWkNamespace.DataCxt.Cxt = new iGlobalPayEntities(); 
                    ServiceLocator<IPersistence<Customer>>.RegisterService<ObjectCxtNamespace.CustomerPrst>();   */
                }
                else if (typeof(<#=code.Escape(container)#>).IsSubclassOf(typeof(DbContext)))
                {
                    //Common.Framework.Persistence.DbCxt.DataCxt.Cxt = new <#=code.Escape(container)#>();
          <#
	    foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
	    {
	#>   ServiceLocator<IPersistence<<#=code.Escape(entity)#>>>.RegisterService<Persistence.DbCxt.<#=code.Escape(entity)#>Prst>();   
	<#
		}
			    foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
	    {
	#>
		       Mapper.CreateMap<<#=code.Escape(entity)#>,<#=code.Escape(entity)#>Dto>();
               Mapper.CreateMap<<#=code.Escape(entity)#>Dto, <#=code.Escape(entity)#>>();  
	<#
		}
	#> 

        /*  NOTE: You can rename following code for  Following Operation
         *  Create New Record
         *  Read Existing Record
         *  Update Existing Record
         *  Delete Existing Record
      
        ------------------------------------------------------------
         * 
         * Entity Framework CRUD Operation
         * 
         * ----------------------------------------------------------
             public List<TModel> GetModel()
               {
                   return PersistSvr<TModel>.GetAll(ResourceData.NeeyamoDbCOntext).ToList();
               }

               public void InsertModel(TModel model, bool commit)
               {
                   PersistSvr<TModel>.Insert(model, commit);
               }

               public void UpdateModel(TModel currentModel, bool commit)
               {
                   PersistSvr<TModel>.Update(currentModel, commit);
               }

               public void DeleteModel(String modelId, bool commit)
               {
                   IQueryable<TModel> qAction = PersistSvr<TModel>.GetAll(ResourceData.NeeyamoDbCOntext);
                   List<TModel> act = (from c in qAction where c.modelId.ToString() == modelId select c).ToList();
                   if (act.Count > 0)
                   {
                       act[0].Status = false;
					   act[0].UpdatedBy = Globals._userLoginId;
                       act[0].UpdatedDate = DateTime.Now;
                       PersistSvr<TModel>.Delete(act[0], commit);
                   }
               }  
         * 
         */



		 }}
	     <# foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
	    {var navigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity);
	#> <#if (code.Escape(entity).ToLower().Contains("igp"))
			{ #><#}#>
			public List<<#=code.Escape(entity)#>Dto> Get<#=ConvertName(code.Escape(entity))#>(object objContext)
			{  
		        using (var dbContextScope = _dbContextScopeFactory.Create())
				{
				  var context = dbContextScope.DbContexts.Get<ConfigurationTrackerEntities>();
			   	  var <#=code.Escape(entity)#>Record= PersistSvr<<#=code.Escape(entity)#>>.GetAll(context).Where(i=>i.Status==true).ToList( ); 
				  return Mapper.Map<List<<#=code.Escape(entity)#>>, List<<#=code.Escape(entity)#>Dto>>(<#=code.Escape(entity)#>Record);				 
				 }
			}

			public bool Insert<#=ConvertName(code.Escape(entity))#>( <#=code.Escape(entity)#>Dto  customObject, bool commit,object objContext) 
			{ 
		        using (var dbContextScope = _dbContextScopeFactory.Create())
				{
				  var context = dbContextScope.DbContexts.Get<ConfigurationTrackerEntities>();
				 <#=code.Escape(entity)#> <#=code.Escape(entity)#>item=Mapper.Map<<#=code.Escape(entity)#>Dto ,<#=code.Escape(entity)#>>(customObject);
			      var result= PersistSvr<<#=code.Escape(entity)#>>.Insert( <#=code.Escape(entity)#>item, commit,context);
                  customObject = Mapper.Map<<#=code.Escape(entity)#>,<#=code.Escape(entity)#>Dto>(<#=code.Escape(entity)#>item);
                  return result;
				 }
			}	 

			public bool Update<#=ConvertName(code.Escape(entity))#>( <#=code.Escape(entity)#>Dto  customObject, bool commit,object objContext) 
			{ 
				using (var dbContextScope = _dbContextScopeFactory.Create())
				{
				  var context = dbContextScope.DbContexts.Get<ConfigurationTrackerEntities>();
				  <#=code.Escape(entity)#> <#=code.Escape(entity)#>item=Mapper.Map<<#=code.Escape(entity)#>Dto ,<#=code.Escape(entity)#>>(customObject);
  			       var result= PersistSvr<<#=code.Escape(entity)#>>.Update( <#=code.Escape(entity)#>item, commit,(DbContext)context); 
				   customObject = Mapper.Map<<#=code.Escape(entity)#>,<#=code.Escape(entity)#>Dto>(<#=code.Escape(entity)#>item);
                   return result;
				  }
			}	 

			public bool Delete<#=ConvertName(code.Escape(entity))#>( int id, bool commit, string intUserId,object objContext) 
			{
			    using (var dbContextScope = _dbContextScopeFactory.Create())
				{
				  var context = dbContextScope.DbContexts.Get<ConfigurationTrackerEntities>(); 
				  <#=code.Escape(entity)#> <#=code.Escape(entity)#>Item =  PersistSvr<<#=code.Escape(entity)#>>.FindById(id,context);
                  <#=code.Escape(entity)#>Item.Status = false;
                  <#=code.Escape(entity)#>Item.UpdatedBy = intUserId;
                  <#=code.Escape(entity)#>Item.UpdatedDate = DateTime.Now;
                  return PersistSvr<<#=code.Escape(entity)#>>.Delete(<#=code.Escape(entity)#>Item, commit, context);  
		         }
		    }
		 <#  }#>	
				 }
			     
		   }

<#+
    ////////
    ////////  Write PrimitiveType Properties.
    ////////

				void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty,EntityType entity)
			{
			var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
			WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
				navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
				code.Escape(navigationProperty),
				 code.Escape(entity),
				code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
				code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
			}

			

			void WriteProperty(string accessibility, string type, string name,string entityName, string getterAccessibility, string setterAccessibility)
			{#>
				 result = result.Include(i=>i.<#=name#>);
			<#+
			}
		

    private void WritePrimitiveTypeProperty(EdmProperty property, CodeGenerationTools code,EntityType entity)
    {
        MetadataTools ef = new MetadataTools(this);
		var dataTypeAtt = GetDataTypeAttribute(property, ef);	
		if (ef.IsKey(property)) 
		{
		haskey=false;
		#>  act  = PersistSvr<<#=code.Escape(entity)#>>.GetAll(context).Where(i => i.<#=code.Escape(property)#> == id).ToList();
			if (act != null)
					 {
				if (act.Count > 0)
							 {      
							 act[0].Status = false;
							 act[0].UpdatedBy = intUserId;
							 act[0].UpdatedDate = DateTime.Now;
							 return	PersistSvr<<#=code.Escape(entity)#>>.Delete(act[0], commit,context);
							 }
						 }} 
			  }   return true;	
		}
<#+ }	#>
  
<#+ 
	}


    ////////
    ////////  Write PrimitiveType Properties.
    ////////
    private void WriteNavigationTypeProperty(NavigationProperty navProperty, CodeGenerationTools code)
    {
#>
    		<#=code.SpaceAfter(NewModifier(navProperty))#><#=Accessibility.ForProperty(navProperty)#> EntityCollection<<#=MultiSchemaEscape(navProperty.ToEndMember.GetEntityType(), code)#>> <#=code.Escape(navProperty)#> { get; set; }

<#+
	}
	
public string FixName(string propName)
{
	if (propName.ToLower() != "id" && propName.ToLower().EndsWith("id"))
	{
		propName = propName.Replace("Id","").Replace("ID","");
	}
	return Regex.Replace(propName,"([A-Z])"," $1",RegexOptions.Compiled).Trim();
}



	string PropertyVirtualModifier(string accessibility)
  {
return accessibility + (accessibility != "private" ? " virtual" : "");
 }

public static bool haskey {get;set;}
public string ConvertName(string propName)
{ 
		propName = propName.Replace("_","");
	
     	return propName;
}

public string GetDataTypeAttribute(EdmProperty property, MetadataTools ef)
{
	var propLower = property.Name.ToLower();
	if (ef.ClrType(property.TypeUsage) == typeof(System.DateTime))
	{
		return "[DataType(DataType.DateTime)]";
	}
	if (propLower.Contains("phone"))
	{
		return "[DataType(DataType.PhoneNumber)]";
	}
	if (propLower.Contains("html"))
	{
		return "[DataType(DataType.Html)]";
	}
	if (propLower.Contains("email"))
	{
		return "[DataType(DataType.EmailAddress)]";
	}
	if (propLower.Contains("url"))
	{
		return "[DataType(DataType.Url)]";
	}
	return String.Empty;
}
	
////////
////////  Declare Template Public Properties.
////////
public string SourceCsdlPath{ get; set; }
public string ModelNamespace{ get; set; }
public EdmItemCollection ItemCollection{ get; set; }
public IEnumerable<string> ReferenceCsdlPaths{ get; set; }
public Nullable<bool> CreateContextAddToMethods{ get; set; }
public Dictionary<string, string> EdmToObjectNamespaceMap
{
    get { return _edmToObjectNamespaceMap; }
    set { _edmToObjectNamespaceMap = value; }
}
public Dictionary<string, string> _edmToObjectNamespaceMap = new Dictionary<string, string>();
public Double SourceEdmVersion
{
    get
    {
        if (ItemCollection != null)
        {
            return ItemCollection.EdmVersion;
        }

        return 0.0;
    }
}

////////
////////  Declare Template Private Properties.
////////
static System.Resources.ResourceManager ResourceManager
{
    get
    {
        if (_resourceManager == null)
        {
            System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
            System.Threading.Interlocked.CompareExchange(ref _resourceManager, resourceManager, null);
        }
        return _resourceManager;
    }
}
static System.Resources.ResourceManager _resourceManager;

#>
<#+


private static string GetResourceString(string resourceName)
{
    return ResourceManager.GetString(resourceName,
         null); //  Take default culture.
}


	
public string small(string propName)
{

	return propName.ToLower();
	
}

private void VerifyTypeUniqueness()
{
    HashSet<string> hash = new HashSet<string>();
    IEnumerable<GlobalItem> allTypes = GetSourceSchemaTypes<GlobalItem>().Where(i => i is StructuralType || i is EntityContainer);

    foreach (GlobalItem type in allTypes)
    {
        if (!hash.Add(GetGlobalItemName(type)))
        {
            //  6034 is the error number used by System.Data.Entity.Design EntityClassGenerator.
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6034",
             String.Format(CultureInfo.CurrentCulture,
                GetResourceString("Template_DuplicateTopLevelType"),
             GetGlobalItemName(type))));
        }
    }
}

protected string GetGlobalItemName(GlobalItem item)
{
    if (item is EdmType)
    {
        //  EntityType or ComplexType.
        return ((EdmType)item).Name;
    }
    else
    {
        //  Must be an EntityContainer.
        return ((EntityContainer)item).Name;
    }
}



void ApplyUserSettings(UserSettings userSettings)
{
    //  Setup template UserSettings.
    if (SourceCsdlPath == null)
    {
#if !PREPROCESSED_TEMPLATE
        if(userSettings.SourceCsdlPath == "$" + "edmxInputFile" + "$")
        {
            Errors.Add(new System.CodeDom.Compiler.CompilerError(Host.TemplateFile, 0, 0, "",
                GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return;
        }

        SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath);
#else
        SourceCsdlPath = userSettings.SourceCsdlPath;
#endif
    }

    // normalize the path, remove ..\ from it
    SourceCsdlPath = Path.GetFullPath(SourceCsdlPath);


    if (ReferenceCsdlPaths == null)
    {
        ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths;
    }

    if (!CreateContextAddToMethods.HasValue)
    {
        CreateContextAddToMethods = userSettings.CreateContextAddToMethods;
    }

    DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation");
}


class UserSettings
{
    public string SourceCsdlPath{ get; set; }
    public string[] ReferenceCsdlPaths{ get; set; }
    public bool FullyQualifySystemTypes{ get; set; }
    public bool CreateContextAddToMethods{ get; set; }
    public bool CamelCaseFields{ get; set; }
}

string MultiSchemaEscape(TypeUsage usage, CodeGenerationTools code)
{
    StructuralType structural = usage.EdmType as StructuralType;
    if (structural != null)
    {
        return MultiSchemaEscape(structural, code);
    }
    return code.Escape(usage);
}

string MultiSchemaEscape(StructuralType type, CodeGenerationTools code)
{
    if (type.NamespaceName != ModelNamespace)
    {
        return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type));
    }

    return code.Escape(type);
}

string NewModifier(NavigationProperty navigationProperty)
{
    Type baseType = typeof(EntityObject);
    return NewModifier(baseType, navigationProperty.Name);
}

string NewModifier(EdmFunction edmFunction)
{
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, edmFunction.Name);
}

string NewModifier(EntitySet set)
{
    Type baseType = typeof(ObjectContext);
    return NewModifier(baseType, set.Name);
}

string NewModifier(EdmProperty property)
{
    Type baseType;
    if (property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        baseType = typeof(EntityObject);
    }
    else
    {
        baseType = typeof(ComplexObject);
    }
    return NewModifier(baseType, property.Name);
}

string NewModifier(Type type, string memberName)
{
    if (HasBaseMemberWithMatchingName(type, memberName))
    {
        return "new";
    }
    return string.Empty;
}

static bool HasBaseMemberWithMatchingName(Type type, string memberName)
{
    BindingFlags bindingFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public
                | BindingFlags.Instance | BindingFlags.Static;
    return type.GetMembers(bindingFlags).Where(m => IsVisibleMember(m)).Any(m => m.Name == memberName);
}

string ChangingMethodName(EdmMember member)
{
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name);
}

string ChangedMethodName(EdmMember member)
{
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name);
}

string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
{
    string namePart = property.Name + "Initialized";
    if (code.CamelCaseFields)
    {
        namePart = code.CamelCase(namePart);
    }
    return "_" + namePart;
}

string OptionalNullableParameterForSetValidValue(EdmMember member, CodeGenerationTools code)
{
    MetadataTools ef = new MetadataTools(this);
    string list = string.Empty;
    if (((PrimitiveType)member.TypeUsage.EdmType).ClrEquivalentType.IsClass)
    {
        MetadataProperty storeGeneratedPatternProperty = null;
        bool isNullable = ef.IsNullable(member.TypeUsage) ||
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty) &&
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"));
        list += ", " + code.CreateLiteral(isNullable);
    }
    return list;
}

static bool IsVisibleMember(MemberInfo memberInfo)
{
    if (memberInfo is EventInfo)
    {
        EventInfo ei = (EventInfo)memberInfo;
        MethodInfo add = ei.GetAddMethod();
        MethodInfo remove = ei.GetRemoveMethod();
        return IsVisibleMethod(add) || IsVisibleMethod(remove);
    }
    else if (memberInfo is FieldInfo)
    {
        FieldInfo fi = (FieldInfo)memberInfo;
        return !fi.IsPrivate && !fi.IsAssembly;
    }
    else if (memberInfo is MethodBase)
    {
        MethodBase mb = (MethodBase)memberInfo;
        if (mb.IsSpecialName)
            return false;
        return IsVisibleMethod(mb);
    }
    else if (memberInfo is PropertyInfo)
    {
        PropertyInfo pi = (PropertyInfo)memberInfo;
        MethodInfo get = pi.GetGetMethod();
        MethodInfo set = pi.GetSetMethod();
        return IsVisibleMethod(get) || IsVisibleMethod(set);
    }

    return false;
}

static bool IsVisibleMethod(MethodBase methodBase)
{
    if (methodBase == null)
        return false;

    return !methodBase.IsPrivate && !methodBase.IsAssembly;
}

IEnumerable<T> GetSourceSchemaTypes<T>() where T : GlobalItem
{
    if (Path.GetExtension(SourceCsdlPath) != ".edmx")
    {
        return ItemCollection.GetItems<T>().Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
    }
    else
    {
        return ItemCollection.GetItems<T>();
    }
}

string EndName(AssociationType association, int index)
{
    return association.AssociationEndMembers[index].Name;
}

string EndMultiplicity(AssociationType association, int index, CodeGenerationTools code)
{
    return code.CreateLiteral(association.AssociationEndMembers[index].RelationshipMultiplicity);
}

string EscapeEndTypeName(AssociationType association, int index, CodeGenerationTools code)
{
    EntityType entity = association.AssociationEndMembers[index].GetEntityType();
    return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity));
}

string GetObjectNamespace(string csdlNamespaceName)
{
    string objectNamespace;
    if (EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
    {
        return objectNamespace;
    }

    return csdlNamespaceName;
}

void UpdateObjectNamespaceMap(string objectNamespace)
{
	if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace))
	{
		EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);	
	}
}

static string FixParameterName(string name, CodeGenerationTools code)
{
    //  Change any property that is 'id' (case insensitive) to 'ID'
    //  since 'iD' is a violation of FxCop rules.
    if (StringComparer.OrdinalIgnoreCase.Equals(name, "id"))
    {
        //  Return all lower case since it is an abbreviation, not an acronym.
        return "id";
    }
    return code.CamelCase(name);
}

string BaseTypeName(EntityType entity, CodeGenerationTools code)
{
    return entity.BaseType == null ? "EntityObject" : MultiSchemaEscape((StructuralType)entity.BaseType, code);
}

bool IncludePropertyInFactoryMethod(StructuralType factoryType, EdmProperty edmProperty)
{
    if (edmProperty.Nullable)
    {
        return false;
    }

    if (edmProperty.DefaultValue != null)
    {
        return false;
    }

    if ((Accessibility.ForReadOnlyProperty(edmProperty) != "public" && Accessibility.ForWriteOnlyProperty(edmProperty) != "public") ||
        (factoryType != edmProperty.DeclaringType && Accessibility.ForWriteOnlyProperty(edmProperty) == "private")
       )
    {
        //  There is no public part to the property.
        return false;
    }

    return true;
}


class FactoryMethodParameter
{
    public EdmProperty Source;
    public string RawParameterName;
    public string ParameterName;
    public string ParameterType;
    public string ParameterComment;
    public bool IsComplexType;

    public static IEnumerable<FactoryMethodParameter> CreateParameters(IEnumerable<EdmProperty> properties, UniqueIdentifierService unique, Func<TypeUsage, CodeGenerationTools, string> multiSchemaEscape, CodeGenerationTools code)
    {
        List<FactoryMethodParameter> parameters = new List<FactoryMethodParameter>();
        foreach (EdmProperty property in properties)
        {
            FactoryMethodParameter parameter = new FactoryMethodParameter();
            parameter.Source = property;
            parameter.IsComplexType = property.TypeUsage.EdmType is ComplexType;
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(property.Name, code));
            parameter.ParameterName = code.Escape(parameter.RawParameterName);
            parameter.ParameterType = multiSchemaEscape(property.TypeUsage, code);
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), property.Name);
            parameters.Add(parameter);
        }

        return parameters;
    }
}

string DefaultSummaryComment{ get; set; }

string SummaryComment(MetadataItem item)
{
    if (item.Documentation != null && item.Documentation.Summary != null)
    {
        return PrefixLinesOfMultilineComment(XMLCOMMENT_START + " ", XmlEntityize(item.Documentation.Summary));
    }

    if (DefaultSummaryComment != null)
    {
        return DefaultSummaryComment;
    }

    return string.Empty;
}

string LongDescriptionCommentElement(MetadataItem item, int indentLevel)
{
    if (item.Documentation != null && !String.IsNullOrEmpty(item.Documentation.LongDescription))
    {
        string comment = Environment.NewLine;
        string lineStart = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START + " ";
        comment += lineStart + "<LongDescription>" + Environment.NewLine;
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine;
        comment += lineStart + "</LongDescription>";
        return comment;
    }
    return string.Empty;
}

string PrefixLinesOfMultilineComment(string prefix, string comment)
{
    return comment.Replace(Environment.NewLine, Environment.NewLine + prefix);
}

string ParameterComments(IEnumerable<Tuple<string, string>> parameters, int indentLevel)
{
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    foreach (Tuple<string, string> parameter in parameters)
    {
        builder.AppendLine();
        builder.Append(CodeRegion.GetIndent(indentLevel));
        builder.Append(XMLCOMMENT_START);
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2));
    }
    return builder.ToString();
}

string XmlEntityize(string text)
{
    if (string.IsNullOrEmpty(text))
    {
        return string.Empty;
    }

    text = text.Replace("&","&amp;");
    text = text.Replace("<","&lt;").Replace(">","&gt;");
    string id = Guid.NewGuid().ToString();
    text = text.Replace(Environment.NewLine, id);
    text = text.Replace("\r", "&#xD;").Replace("\n","&#xA;");
    text = text.Replace(id, Environment.NewLine);
    return text.Replace("\'","&apos;").Replace("\"","&quot;");
}

const string XMLCOMMENT_START = "///";
IEnumerable<EdmProperty> GetProperties(StructuralType type)
{
    if (type.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        return ((EntityType)type).Properties;
    }
    else
    {
        return ((ComplexType)type).Properties;
    }
}

protected void VerifyGetterAndSetterAccessibilityCompatability(EdmMember member)
{
    string rawGetterAccessibility = Accessibility.ForReadOnlyProperty(member);
    string rawSetterAccessibility = Accessibility.ForWriteOnlyProperty(member);

    if ((rawGetterAccessibility == "internal" && rawSetterAccessibility ==   "protected") ||
        (rawGetterAccessibility == "protected" && rawSetterAccessibility == "internal"))

    {
           Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture,
                   GetResourceString("GeneratedPropertyAccessibilityConflict"),
                       member.Name, rawGetterAccessibility, rawSetterAccessibility)));
    }
}

private void VerifyEntityTypeAndSetAccessibilityCompatability(EntitySet set)
{
    string typeAccess = Accessibility.ForType(set.ElementType);
    string setAccess = Accessibility.ForReadOnlyProperty(set);

    if(typeAccess == "internal" && (setAccess == "public" || setAccess == "protected"))
    {
       Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture,
               GetResourceString("EntityTypeAndSetAccessibilityConflict"),
                   set.ElementType.Name, typeAccess, set.Name, setAccess)));
    }
}

////////
////////  UniqueIdentifierService
////////
sealed class UniqueIdentifierService
{
    private readonly HashSet<string> _knownIdentifiers;

    public UniqueIdentifierService()
    {
        _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
    }

    /// <summary>
    ///  Makes the supplied identifier  unique within the scope by adding
    ///  a suffix (1, 2, 3, ...), and returns the unique identifier.
    /// </summary>
    public string AdjustIdentifier(string identifier)
    {
        //  find a unique name by adding suffix as necessary
        var numberOfConflicts = 0;
        var adjustedIdentifier = identifier;

        while (!_knownIdentifiers.Add(adjustedIdentifier))
        {
            ++numberOfConflicts;
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
        }

        return adjustedIdentifier;
    }
}

#>
